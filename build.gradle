/*
 * Copyright 2012 - 2014 Silvio Wangler (silvio.wangler@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
    }
}

plugins {
    id 'idea'
    id 'com.github.ben-manes.versions' version '0.14.0'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'com.github.hierynomus.license' version '0.13.1'
}

configure(allprojects) {

    apply plugin: 'project-report'
    apply plugin: 'jacoco'

    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'log4j', module: 'log4j'
    }

    repositories {
        jcenter()
    }

    group = 'ch.silviowangler.dox'
    version = '0.5.4'

    configurations.all {
        resolutionStrategy {

            failOnVersionConflict()

            eachDependency { DependencyResolveDetails details ->
                //changing 'groovy-all' into 'groovy':
                if (details.requested.name == 'groovy-all') {
                    details.useTarget group: details.requested.group, name: 'groovy', version: groovyVersion
                }
            }

            forcedModules = [
                    "org.springframework:spring-aop:${springVersion}",
                    "org.springframework:spring-asm:${springVersion}",
                    "org.springframework:spring-beans:${springVersion}",
                    "org.springframework:spring-context:${springVersion}",
                    "org.springframework:spring-core:${springVersion}",
                    "org.springframework:spring-expression:${springVersion}",
                    "org.springframework:spring-jdbc:${springVersion}",
                    "org.springframework:spring-orm:${springVersion}",
                    "org.springframework:spring-test:${springVersion}",
                    "org.springframework:spring-tx:${springVersion}",
                    "org.springframework:spring-web:${springVersion}",
                    "org.springframework:spring-webmvc:${springVersion}",
                    "org.springframework:spring-oxm:${springVersion}",
                    "org.hamcrest:hamcrest-core:${hamcrestVersion}",
                    "org.hibernate:hibernate-entitymanager:${hibernateVersion}",
                    "commons-beanutils:commons-beanutils:${commonsBeanUtilsVersion}",
                    "commons-lang:commons-lang:2.4",
                    "org.slf4j:slf4j-api:${slf4jVersion}",
                    "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
                    "joda-time:joda-time:${jodaTimeVersion}",
                    "org.aspectj:aspectjrt:${aspectjWeaverVersion}",
                    "org.aspectj:aspectjweaver:${aspectjWeaverVersion}"
            ]
        }
    }

    idea.module {
        inheritOutputDirs = true
    }

    license {
        header = file('LICENSE.txt')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.name = 'Silvio Wangler'
        ext.email = 'silvio.wangler@gmail.com'

        excludes(["**/*.properties", "**/*.sql"])
        dryRun = true
    }
}

configure(subprojects) { subproject ->

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: "net.ltgt.apt"

    compileJava.options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation']
    compileTestJava.options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation']

    sourceCompatibility = 8
    targetCompatibility = 8

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
        apt "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        testCompile "org.codehaus.groovy:groovy:${groovyVersion}"
        testCompile "org.spockframework:spock-core:${spockVersion}"
        testCompile "junit:junit:${junitVersion}",
                "org.mockito:mockito-core:${mockitoVersion}",
                "org.hamcrest:hamcrest-core:${hamcrestVersion}",
                "org.hamcrest:hamcrest-library:${hamcrestVersion}"
    }

    jar {
        manifest {
            attributes(
                    'Built-By': "Gradle ${gradle.gradleVersion}",
                    'Implementation-Title': "DOX-${subproject.name}",
                    'Implementation-Version': subproject.version,
                    'Implementation-Vendor': 'Silvio Wangler',
                    'Specification-Vendor': 'Silvio Wangler',
                    'Specification-Title': "DOX-${subproject.name}",
                    'Specification-Version': subproject.version
            )
        }

        from("${rootProject.projectDir}") {
            include "LICENSE.txt"
            into "META-INF"
            expand(dateOfYear: new Date().format('yyyy'))
        }

        baseName = "dox-${baseName}"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava

        from("${rootProject.projectDir}") {
            include "LICENSE.txt"
            into "META-INF"
            expand(dateOfYear: new Date().format('yyyy'))
        }
    }

    artifacts {
        archives sourcesJar
    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            include '**/*.properties'
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'dox.app.version': "${version}-${new Date().format("yyyyMMddHHmmss")}".toString(),
                    'gradleVersion'  : gradle.gradleVersion
            ])
        }
        from(sourceSets.main.resources.srcDirs) { exclude '**/*.properties' }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }
            }
        }
    }

    install {
        repositories.mavenInstaller {
            customizePom(pom, subproject)
        }
    }

    bintray {
        user = bintrayUser // this usually comes form gradle.properties file in ~/.gradle
        key = bintrayKey // this usually comes form gradle.properties file in ~/.gradle
        publications = ['mavenJava'] // see publications closure
        pkg { //package will be created if does not exist
            repo = 'releases'
            name = 'dox'
            desc = 'Package created from dox'
            licenses = ['Apache-2.0']
            labels = ['spring', 'dms', 'rest', 'angularjs', 'documentmanagement']
        }
    }
}

def customizePom(pom, gradleProject) {
    pom.whenConfigured { generatedPom ->

        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == 'test'
        }

        // add all items necessary for maven central publication
        generatedPom.project {
            name = gradleProject.description
            description = gradleProject.description
            url = 'https://github.com/saw303/dox'
            organization {
                name = 'Wangler Software Development'
                url = 'http://saw303.github.io/dox/'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url = 'https://github.com/saw303/dox'
                connection = 'scm:git:git://github.com/saw303/dox'
                developerConnection = 'scm:git:git://github.com/saw303/dox'
            }
            developers {
                developer {
                    id = 'saw303'
                    name = 'Silvio Wangler'
                    email = 'silvio.wangler@gmail.com'
                }
            }
            issueManagement {
                system = 'Youtrack'
                url = 'http://saw303.myjetbrains.com/youtrack/issues/dox'
            }
        }
    }
}
