import java.time.LocalDate

/*
 * Copyright 2012 - 2014 Silvio Wangler (silvio.wangler@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
	ext {
		springBootVersion = '2.0.0.M7'
	}
	repositories {
		jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE")

		classpath "net.ltgt.gradle:gradle-apt-plugin:0.13"
		classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
	}
}


repositories {
	jcenter()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
	}
}

allprojects {
	apply plugin: "io.spring.dependency-management"
	apply plugin: "idea"
}

subprojects { subproject ->

	apply from: "${rootProject.projectDir}/gradle/java.gradle"
	apply from: "${rootProject.projectDir}/gradle/mapstruct.gradle"

	apply plugin: "com.github.hierynomus.license"
	apply plugin: "net.ltgt.apt-idea"

	group = 'ch.silviowangler.dox'
	version = '0.5.4'

	repositories {
		jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}

	dependencyManagement {
		imports {
			mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
		}
	}

	dependencies {
		testCompile "org.codehaus.groovy:groovy:${groovyVersion}"
		testCompile "org.spockframework:spock-core:${spockVersion}"
	}

	compileJava.options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation']
	compileTestJava.options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation']

	license {
		header = file("${rootDir}/LICENSE-SHORT.txt")
		ext.year = LocalDate.now().getYear()
		ext.name = licenseOwner
		ext.email = licenseOwnerEmail

		excludes(["**/*.properties", "**/*.sql", "**/*.txt", "**/*.pdf", "**/*.doc", "**/*.docx", "**/*.tif"])
	}

	jar {
		manifest {
			attributes(
					'Built-By': "Gradle ${gradle.gradleVersion}",
					'Implementation-Title': "DOX-${subproject.name}",
					'Implementation-Version': subproject.version,
					'Implementation-Vendor': 'Silvio Wangler',
					'Specification-Vendor': 'Silvio Wangler',
					'Specification-Title': "DOX-${subproject.name}",
					'Specification-Version': subproject.version
			)
		}

		from(rootProject.projectDir) {
			include "LICENSE.txt"
			into "META-INF"
			expand(year: new Date().format('yyyy'), name: licenseOwner, email: licenseOwnerEmail)
		}

		baseName = "dox-${baseName}"
	}

	test {
		testLogging {
			events "passed", "skipped", "failed"
			exceptionFormat "full"
		}
	}
}
