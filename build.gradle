/*
 * Copyright 2013 Silvio Wangler (silvio.wangler@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

allprojects {

    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply from: 'https://raw.github.com/brunodecarvalho/gradle-plugins/master/jacoco-multiproject-aggregator.gradle'

    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'log4j', module: 'log4j'
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://repository.jboss.org/nexus/content/groups/public'
            url 'http://repo.springsource.org/libs-milestone'
        }
    }

    group = 'ch.silviowangler.dox'
    version = '0.1-SNAPSHOT'

    project.ext {
        springVersion = '3.2.2.RELEASE'
        springDataVersion = '1.2.0.RELEASE'
        springSecurityVersion = '3.2.0.M1'
        hibernateVersion = '4.1.9.Final'
        slf4jVersion = '1.7.2'
        logbackVersion = '1.0.9'
        junitVersion = '4.11'
        tilesVersion = '3.0.1'
        commonsIOVersion = '2.4'
        commonsCodecVersion = '1.6'
        commonsBeanUtilsVersion = '1.8.3'
        jodaTimeVersion = '2.1'
        h2Version = '1.3.170'
        mysqlVersion = '5.1.22'
        iTextVersion = '5.3.4'
        guavaVersion = '14.0.1'
        mockitoVersion = '1.9.5'
        flywayVersion = '2.1.1'
    }

    configurations.all {
        resolutionStrategy {
            forcedModules = [
                    "org.springframework:spring-aop:${project.ext.springVersion}",
                    "org.springframework:spring-asm:${project.ext.springVersion}",
                    "org.springframework:spring-beans:${project.ext.springVersion}",
                    "org.springframework:spring-context:${project.ext.springVersion}",
                    "org.springframework:spring-core:${project.ext.springVersion}",
                    "org.springframework:spring-expression:${project.ext.springVersion}",
                    "org.springframework:spring-jdbc:${project.ext.springVersion}",
                    "org.springframework:spring-orm:${project.ext.springVersion}",
                    "org.springframework:spring-test:${project.ext.springVersion}",
                    "org.springframework:spring-tx:${project.ext.springVersion}",
                    "org.springframework:spring-web:${project.ext.springVersion}",
                    "org.springframework:spring-webmvc:${project.ext.springVersion}"
            ]
        }
    }
}

subprojects {
    apply plugin: 'java'

    compileJava.options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation']
    compileTestJava.options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation']

    sourceCompatibility = 7
    targetCompatibility = 7

    dependencies {
        compile "org.slf4j:slf4j-api:${ext.slf4jVersion}"
        testCompile "junit:junit:${ext.junitVersion}",
                "org.mockito:mockito-core:${ext.mockitoVersion}",
                'org.hamcrest:hamcrest-core:1.3'
    }

    jar {
        manifest {
            attributes(
                    'Built-By': "Gradle ${gradle.gradleVersion}",
                    'Implementation-Title': "DOX-${project.name}",
                    'Implementation-Version': project.version,
                    'Implementation-Vendor': 'Silvio Wangler',
                    'Specification-Vendor': 'Silvio Wangler',
                    'Specification-Title': "DOX-${project.name}",
                    'Specification-Version': project.version
            )
        }
    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            include '**/*.properties' filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'dox.app.version': "${version}-${new Date().format("yyyyMMddHHmmss")}".toString(),
                    'gradleVersion': project.gradle.gradleVersion
            ])
        }
        from(sourceSets.main.resources.srcDirs) { exclude '**/*.properties' }
    }
}

project(':api') {
    displayName = 'API module'
    dependencies {
        compile "com.google.guava:guava:${ext.guavaVersion}"
    }
}

project(':core') {
    displayName = 'Core module'
    dependencies {
        compile project(':api'), project(':domain'), project(':inexport'),
                "org.springframework:spring-context:${ext.springVersion}",
                "org.springframework:spring-aop:${ext.springVersion}",
                "commons-codec:commons-codec:${ext.commonsCodecVersion}",
                "com.itextpdf:itextpdf:${ext.iTextVersion}",
                "commons-beanutils:commons-beanutils:${ext.commonsBeanUtilsVersion}",
                "commons-io:commons-io:${ext.commonsIOVersion}",
                "joda-time:joda-time:${ext.jodaTimeVersion}",
                "com.google.guava:guava:${ext.guavaVersion}",
                "com.googlecode.flyway:flyway-core:${ext.flywayVersion}"
        compile("org.springframework.security:spring-security-core:${ext.springSecurityVersion}") {
            exclude group: 'org.springframework', module: 'spring-beans'
        }
        runtime "org.slf4j:jcl-over-slf4j:${ext.slf4jVersion}",
                "ch.qos.logback:logback-classic:${ext.logbackVersion}",
                "org.springframework.security:spring-security-config:${ext.springSecurityVersion}",
                'org.aspectj:aspectjweaver:1.7.0' // need this version because 1.6.x is buggy with Spring 3.x (http://goo.gl/73Pwi)
    }
}

project(':functional-tests') {
    displayName = 'Functional test module'

    dependencies {
        testCompile project(':core'),
                "org.springframework:spring-test:${ext.springVersion}",
                "commons-io:commons-io:${ext.commonsIOVersion}",
                "com.google.guava:guava:${ext.guavaVersion}"
        runtime "ch.qos.logback:logback-classic:${ext.logbackVersion}",
                "com.h2database:h2:${ext.h2Version}"
    }
}

project(':web') {
    displayName = 'WEB module'
    apply plugin: 'war'

    war.archiveName = "dox-${version}.war"

    dependencies {
        compile project(':api'), project(':inexport')
        runtime project(':core')
        compile "commons-io:commons-io:${ext.commonsIOVersion}"
        compile "org.springframework:spring-webmvc:${ext.springVersion}"
        compile("org.springframework.security:spring-security-web:${ext.springSecurityVersion}") {
            exclude group: 'org.springframework', module: 'spring-tx'
            exclude group: 'org.springframework', module: 'spring-jdbc'
        }
        compile("org.springframework.security:spring-security-taglibs:${ext.springSecurityVersion}") {
            exclude group: 'org.springframework', module: 'spring-tx'
            exclude group: 'org.springframework', module: 'spring-jdbc'
        }
        testCompile "org.springframework:spring-test:${ext.springVersion}"
        compile 'org.springframework.mobile:spring-mobile-device:1.0.0.RELEASE'
        compile "com.google.guava:guava:${ext.guavaVersion}"
        compile "joda-time:joda-time:${ext.jodaTimeVersion}"
        runtime "org.apache.tiles:tiles-core:${ext.tilesVersion}"
        runtime "org.apache.tiles:tiles-servlet:${ext.tilesVersion}"
        runtime "org.apache.tiles:tiles-jsp:${ext.tilesVersion}"
        runtime "org.apache.tiles:tiles-template:${ext.tilesVersion}"
        runtime "ch.qos.logback:logback-access:${ext.logbackVersion}"
        runtime 'javax.servlet:jstl:1.2'
        providedRuntime "com.h2database:h2:${ext.h2Version}"
        providedRuntime "mysql:mysql-connector-java:${ext.mysqlVersion}"
        providedCompile 'javax.servlet.jsp:jsp-api:2.1'
        providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    }
}

project(':inexport') {
    displayName = 'In- & Export module'
    dependencies {
        compile project(':api'),
                "org.springframework:spring-context:${ext.springVersion}"
        compile 'com.thoughtworks.xstream:xstream:1.4.3', { transitive = false }
    }
}

idea.project {
    jdkName = '1.7'
    languageLevel = '1.7'

    // update the source wildcards
    wildcards += '!?*.txt;!?*.pdf;!?*.xml;!?*.tif;!?*.sql'

    ipr.withXml { provider ->
        def node = provider.asNode()

        // Use GIT
        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = 'Git'

        // Set Gradle home
        def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir]) n
    }
}
