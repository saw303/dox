/*
 * Copyright 2012 - 2014 Silvio Wangler (silvio.wangler@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        maven {
            url 'http://repo.wangler.io/repo'
        }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.5'
        classpath "com.eriwen:gradle-js-plugin:1.12.1"
        classpath 'com.eriwen:gradle-css-plugin:1.11.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
    }
}

configure(allprojects) {

    apply plugin: 'idea'
    apply plugin: 'project-report'
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: 'jacoco'

    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'log4j', module: 'log4j'
    }

    repositories {
        maven {
            url 'http://repo.wangler.io/repo'
        }
    }

    group = 'ch.silviowangler.dox'
    version = '0.4.1-SNAPSHOT'

    project.ext {
        springVersion = '4.1.4.RELEASE'
        springMobileVersion = '1.1.3.RELEASE'
        springDataVersion = '1.7.0.RELEASE'
        springSecurityVersion = '4.0.0.M2'
        hibernateVersion = '4.3.6.Final'
        slf4jVersion = '1.7.10'
        logbackVersion = '1.1.2'
        junitVersion = '4.12'
        tilesVersion = '3.0.5'
        commonsIOVersion = '2.4'
        commonsCodecVersion = '1.10'
        commonsBeanUtilsVersion = '1.9.2'
        commonsExec = '1.3'
        jodaTimeVersion = '2.7'
        h2Version = '1.4.185'
        mysqlVersion = '5.1.34'
        iTextVersion = '5.5.4'
        guavaVersion = '18.0'
        mockitoVersion = '1.10.19'
        flywayVersion = '2.3.1'
        groovyVersion = '2.4.0'
        xstreamVersion = '1.4.7'
        bouncycastleVersion = '1.51'
        jacksonVersion = '2.5.1'
        poiVersion = '3.10.1'
        spockVersion = '0.7-groovy-2.0'
        hamcrestVersion = '1.3'
        aspectjWeaverVersion = '1.8.4'
    }

    configurations.all {
        resolutionStrategy {
            forcedModules = [
                    "org.springframework:spring-aop:${project.ext.springVersion}",
                    "org.springframework:spring-asm:${project.ext.springVersion}",
                    "org.springframework:spring-beans:${project.ext.springVersion}",
                    "org.springframework:spring-context:${project.ext.springVersion}",
                    "org.springframework:spring-core:${project.ext.springVersion}",
                    "org.springframework:spring-expression:${project.ext.springVersion}",
                    "org.springframework:spring-jdbc:${project.ext.springVersion}",
                    "org.springframework:spring-orm:${project.ext.springVersion}",
                    "org.springframework:spring-test:${project.ext.springVersion}",
                    "org.springframework:spring-tx:${project.ext.springVersion}",
                    "org.springframework:spring-web:${project.ext.springVersion}",
                    "org.springframework:spring-webmvc:${project.ext.springVersion}",
                    "org.springframework:spring-oxm:${project.ext.springVersion}"
            ]
        }
    }

    idea.module {
        inheritOutputDirs = true
    }
}

configure(subprojects) { subproject ->

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    compileJava.options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation']
    compileTestJava.options.compilerArgs = ['-Xlint:unchecked', '-Xlint:deprecation']

    sourceCompatibility = 7
    targetCompatibility = 7

    dependencies {
        testCompile "org.codehaus.groovy:groovy-all:${subproject.ext.groovyVersion}"
        testCompile "org.spockframework:spock-core:${subproject.ext.spockVersion}"
        compile "org.slf4j:slf4j-api:${subproject.ext.slf4jVersion}"
        testCompile "junit:junit:${subproject.ext.junitVersion}",
                "org.mockito:mockito-core:${subproject.ext.mockitoVersion}",
                "org.hamcrest:hamcrest-core:${subproject.ext.hamcrestVersion}",
                "org.hamcrest:hamcrest-library:${subproject.ext.hamcrestVersion}"
    }

    jar {
        manifest {
            attributes(
                    'Built-By': "Gradle ${gradle.gradleVersion}",
                    'Implementation-Title': "DOX-${subproject.name}",
                    'Implementation-Version': subproject.version,
                    'Implementation-Vendor': 'Silvio Wangler',
                    'Specification-Vendor': 'Silvio Wangler',
                    'Specification-Title': "DOX-${subproject.name}",
                    'Specification-Version': subproject.version
            )
        }

        from("${rootProject.projectDir}") {
            include "LICENSE.txt"
            into "META-INF"
            expand(dateOfYear: new Date().format('yyyy'))
        }

        baseName = "dox-${baseName}"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava

        from("${rootProject.projectDir}") {
            include "LICENSE.txt"
            into "META-INF"
            expand(dateOfYear: new Date().format('yyyy'))
        }
    }

    artifacts {
        archives sourcesJar
    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            include '**/*.properties'
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'dox.app.version': "${version}-${new Date().format("yyyyMMddHHmmss")}".toString(),
                    'gradleVersion': gradle.gradleVersion
            ])
        }
        from(sourceSets.main.resources.srcDirs) { exclude '**/*.properties' }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }
            }
        }
    }

    install {
        repositories.mavenInstaller {
            customizePom(pom, subproject)
        }
    }

    bintray {
        user = bintrayUser //this usually comes form gradle.properties file in ~/.gradle
        key = bintrayKey //this usually comes form gradle.properties file in ~/.gradle
        publications = ['mavenJava'] // see publications closure
        pkg { //package will be created if does not exist
            repo = 'releases'
            name = 'dox'
            desc = 'Package created from dox'
            licenses = ['Apache-2.0']
            labels = ['spring', 'dms', 'rest', 'angularjs', 'documentmanagement']
        }
    }
}

project(':api') {
    dependencies {
        compile "com.google.guava:guava:${project.ext.guavaVersion}",
                "joda-time:joda-time:${project.ext.jodaTimeVersion}"
    }
}

project(':core') {
    dependencies {
        compile project(':api'), project(':domain'), project(':inexport'),
                "org.springframework:spring-context:${project.ext.springVersion}",
                "org.springframework:spring-aop:${project.ext.springVersion}",
                "commons-codec:commons-codec:${project.ext.commonsCodecVersion}",
                "com.itextpdf:itextpdf:${project.ext.iTextVersion}",
                "commons-beanutils:commons-beanutils:${project.ext.commonsBeanUtilsVersion}",
                "commons-io:commons-io:${project.ext.commonsIOVersion}",
                "org.apache.commons:commons-exec:${project.ext.commonsExec}",
                "joda-time:joda-time:${project.ext.jodaTimeVersion}",
                "com.google.guava:guava:${project.ext.guavaVersion}",
                "com.googlecode.flyway:flyway-core:${project.ext.flywayVersion}"
        compile("org.springframework.security:spring-security-core:${project.ext.springSecurityVersion}") {
            exclude group: 'org.springframework', module: 'spring-beans'
        }
        runtime "org.slf4j:jcl-over-slf4j:${project.ext.slf4jVersion}",
                "ch.qos.logback:logback-classic:${project.ext.logbackVersion}",
                "org.springframework.security:spring-security-config:${project.ext.springSecurityVersion}",
                "org.aspectj:aspectjweaver:${project.ext.aspectjWeaverVersion}", // need this version because 1.6.x is buggy with Spring 3.x (http://goo.gl/73Pwi)
                "org.bouncycastle:bcprov-jdk15on:${project.ext.bouncycastleVersion}", "org.bouncycastle:bcpkix-jdk15on:${project.ext.bouncycastleVersion}"
        testCompile "org.springframework:spring-test:${project.ext.springVersion}",
                "commons-io:commons-io:${project.ext.commonsIOVersion}",
                "com.google.guava:guava:${project.ext.guavaVersion}"
        testRuntime "com.h2database:h2:${project.ext.h2Version}"
    }

    test {
        exclude '**/*IntegrationTest.class'
        reports.html.destination = file("${reports.html.destination}/unit2")
        reports.junitXml.destination = file("${reports.junitXml.destination}/unit2")
    }

    task integrationTest(type: Test) {
        include '**/*IntegrationTest.class'
        reports.html.destination = file("${reports.html.destination}/integration")
        reports.junitXml.destination = file("${reports.junitXml.destination}/integration")

        doFirst {
            def doxStore = System.getenv('DOX_STORE')

            if (!doxStore) doxStore = System.properties['java.io.tmpdir']

            def thumbnailDir = new File(doxStore, 'thumbnails')

            final thumbnailDirExists = thumbnailDir.exists()
            logger.info("File ${thumbnailDir.absolutePath} exists? ${thumbnailDirExists}")

            if (!thumbnailDirExists) {
                assert thumbnailDir.mkdir()
            }
        }
    }

    jacocoTestReport {

        if (file("${buildDir}/jacoco/integrationTest.exec").exists()) {
            executionData = files("${buildDir}/jacoco/integrationTest.exec", "${buildDir}/jacoco/test.exec")
        }
        additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    }

    check.dependsOn integrationTest
}

project(':web') {
    apply plugin: 'war'
    apply plugin: "com.eriwen.gradle.js"
    apply plugin: "com.eriwen.gradle.css"

    war.archiveName = "dox-${version}.war"

    dependencies {
        compile project(':api'), project(':inexport')
        runtime project(':core')
        compile "commons-io:commons-io:${project.ext.commonsIOVersion}"
        compile "org.codehaus.groovy:groovy-templates:${project.ext.groovyVersion}"
        compile "org.springframework:spring-webmvc:${project.ext.springVersion}"
        compile("org.springframework.security:spring-security-web:${project.ext.springSecurityVersion}") {
            exclude group: 'org.springframework', module: 'spring-tx'
            exclude group: 'org.springframework', module: 'spring-jdbc'
        }
        compile("org.springframework.security:spring-security-taglibs:${project.ext.springSecurityVersion}") {
            exclude group: 'org.springframework', module: 'spring-tx'
            exclude group: 'org.springframework', module: 'spring-jdbc'
        }
        testCompile "org.springframework:spring-test:${project.ext.springVersion}"
        compile "org.springframework.mobile:spring-mobile-device:${project.ext.springMobileVersion}"
        compile "com.google.guava:guava:${project.ext.guavaVersion}"
        compile "joda-time:joda-time:${project.ext.jodaTimeVersion}"
        compile "bitwalker:UserAgentUtils:1.12"
        runtime "org.apache.tiles:tiles-core:${project.ext.tilesVersion}"
        runtime "org.apache.tiles:tiles-servlet:${project.ext.tilesVersion}"
        runtime "org.apache.tiles:tiles-jsp:${project.ext.tilesVersion}"
        runtime "org.apache.tiles:tiles-template:${project.ext.tilesVersion}"
        runtime "ch.qos.logback:logback-access:${project.ext.logbackVersion}"
        runtime 'javax.servlet:jstl:1.2'
        runtime "com.fasterxml.jackson.core:jackson-core:${project.ext.jacksonVersion}"
        compile "com.fasterxml.jackson.core:jackson-databind:${project.ext.jacksonVersion}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${project.ext.jacksonVersion}"
        runtime "org.springframework:spring-oxm:${project.ext.springVersion}"
        runtime "com.thoughtworks.xstream:xstream:${project.ext.xstreamVersion}"
        runtime 'joda-time:joda-time-jsptags:1.1.1'
        providedRuntime "com.h2database:h2:${project.ext.h2Version}"
        providedRuntime "mysql:mysql-connector-java:${project.ext.mysqlVersion}"
        providedCompile 'javax.servlet.jsp:jsp-api:2.1'
        providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    }

    javascript.source {
        dev {
            js {
                srcDirs file("${projectDir}/src/main/webapp/js/libs/angular-1.2.26"), file("${projectDir}/src/main/webapp/js/libs/foundation"), file("${projectDir}/src/main/webapp/js/dox")
                include "*.js"
                exclude "*.min.js*"
            }
        }
        prod {
            js {
                srcDirs file("${projectDir}/src/main/webapp/js/dox")
                include "*.min.js*"
            }
        }
    }

    combineJs {
        source = javascript.source.dev.js.files
        dest = file("${buildDir}/dox-all.js")
    }

    def googleCompileOptions = new com.google.javascript.jscomp.CompilerOptions()
    googleCompileOptions.languageIn = 'ECMASCRIPT5'

    minifyJs {
        source = combineJs
        dest = file("${buildDir}/gen/js/dox-all-min.js")

        closure {
            warningLevel = 'QUIET'
            compilerOptions = googleCompileOptions

        }
    }

    gzipJs {
        source = minifyJs
        dest = file("${buildDir}/gen/js/dox-all-min-${version}.js")
    }

    css.source {
        dev {
            css {
                srcDir file("${projectDir}/src/main/webapp/resources/css")
                include "*.css"
                exclude "*.min.css"
            }
        }
    }

    combineCss {
        source = css.source.dev.css.files
        dest = "${buildDir}/all.css"
    }

    minifyCss {
        source = combineCss
        dest = "${buildDir}/gen/css/all-min.css"
        yuicompressor { // Optional
            lineBreakPos = -1
        }
    }

    gzipCss {
        source = minifyCss
        dest = "${buildDir}/gen/css/all.${version}.css"
    }

    war {
        it.dependsOn minifyCss, minifyJs

        from("${buildDir}/gen/js", {
            into 'js'
        })

        from("${buildDir}/gen/css", {
            into 'resources/css'
        })
    }
}

project(':inexport') {
    dependencies {
        compile project(':api'),
                "org.springframework:spring-context:${project.ext.springVersion}"
        compile "com.thoughtworks.xstream:xstream:${project.ext.xstreamVersion}", { transitive = false }
    }
}


idea.project {
    jdkName = '1.7'
    languageLevel = '1.7'

    // update the source wildcards
    wildcards += '!?*.txt;!?*.pdf;!?*.xml;!?*.tif;!?*.sql'

    ipr.withXml { provider ->
        def node = provider.asNode()

        // Use GIT
        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = 'Git'

        // Set Gradle home
        def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir]) n
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

def customizePom(pom, gradleProject) {
    pom.whenConfigured { generatedPom ->

        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == 'test'
        }

        // add all items necessary for maven central publication
        generatedPom.project {
            name = gradleProject.description
            description = gradleProject.description
            url = 'https://github.com/saw303/dox'
            organization {
                name = 'Wangler Software Development'
                url = 'http://saw303.github.io/dox/'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url = 'https://github.com/saw303/dox'
                connection = 'scm:git:git://github.com/saw303/dox'
                developerConnection = 'scm:git:git://github.com/saw303/dox'
            }
            developers {
                developer {
                    id = 'saw303'
                    name = 'Silvio Wangler'
                    email = 'silvio.wangler@gmail.com'
                }
            }
            issueManagement {
                system = 'Youtrack'
                url = 'http://saw303.myjetbrains.com/youtrack/issues/dox'
            }
        }
    }
}
